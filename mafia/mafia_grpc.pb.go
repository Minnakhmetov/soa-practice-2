// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: mafia.proto

package mafia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (Mafia_LoginClient, error)
	FinishDay(ctx context.Context, in *FinishDayRequest, opts ...grpc.CallOption) (*FinishDayResponse, error)
	ExecutePlayer(ctx context.Context, in *ExecutePlayerRequest, opts ...grpc.CallOption) (*ExecutePlayerResponse, error)
	KillPlayer(ctx context.Context, in *KillPlayerRequest, opts ...grpc.CallOption) (*KillPlayerResponse, error)
	CheckPlayer(ctx context.Context, in *CheckPlayerRequest, opts ...grpc.CallOption) (*CheckPlayerResponse, error)
	PublishCheckResult(ctx context.Context, in *PublishCheckResultRequest, opts ...grpc.CallOption) (*PublishCheckResultResponse, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (Mafia_LoginClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], "/mafia.Mafia/Login", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaLoginClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_LoginClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type mafiaLoginClient struct {
	grpc.ClientStream
}

func (x *mafiaLoginClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) FinishDay(ctx context.Context, in *FinishDayRequest, opts ...grpc.CallOption) (*FinishDayResponse, error) {
	out := new(FinishDayResponse)
	err := c.cc.Invoke(ctx, "/mafia.Mafia/FinishDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) ExecutePlayer(ctx context.Context, in *ExecutePlayerRequest, opts ...grpc.CallOption) (*ExecutePlayerResponse, error) {
	out := new(ExecutePlayerResponse)
	err := c.cc.Invoke(ctx, "/mafia.Mafia/ExecutePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) KillPlayer(ctx context.Context, in *KillPlayerRequest, opts ...grpc.CallOption) (*KillPlayerResponse, error) {
	out := new(KillPlayerResponse)
	err := c.cc.Invoke(ctx, "/mafia.Mafia/KillPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) CheckPlayer(ctx context.Context, in *CheckPlayerRequest, opts ...grpc.CallOption) (*CheckPlayerResponse, error) {
	out := new(CheckPlayerResponse)
	err := c.cc.Invoke(ctx, "/mafia.Mafia/CheckPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) PublishCheckResult(ctx context.Context, in *PublishCheckResultRequest, opts ...grpc.CallOption) (*PublishCheckResultResponse, error) {
	out := new(PublishCheckResultResponse)
	err := c.cc.Invoke(ctx, "/mafia.Mafia/PublishCheckResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	Login(*LoginRequest, Mafia_LoginServer) error
	FinishDay(context.Context, *FinishDayRequest) (*FinishDayResponse, error)
	ExecutePlayer(context.Context, *ExecutePlayerRequest) (*ExecutePlayerResponse, error)
	KillPlayer(context.Context, *KillPlayerRequest) (*KillPlayerResponse, error)
	CheckPlayer(context.Context, *CheckPlayerRequest) (*CheckPlayerResponse, error)
	PublishCheckResult(context.Context, *PublishCheckResultRequest) (*PublishCheckResultResponse, error)
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) Login(*LoginRequest, Mafia_LoginServer) error {
	return status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMafiaServer) FinishDay(context.Context, *FinishDayRequest) (*FinishDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishDay not implemented")
}
func (UnimplementedMafiaServer) ExecutePlayer(context.Context, *ExecutePlayerRequest) (*ExecutePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePlayer not implemented")
}
func (UnimplementedMafiaServer) KillPlayer(context.Context, *KillPlayerRequest) (*KillPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillPlayer not implemented")
}
func (UnimplementedMafiaServer) CheckPlayer(context.Context, *CheckPlayerRequest) (*CheckPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPlayer not implemented")
}
func (UnimplementedMafiaServer) PublishCheckResult(context.Context, *PublishCheckResultRequest) (*PublishCheckResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishCheckResult not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_Login_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).Login(m, &mafiaLoginServer{stream})
}

type Mafia_LoginServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type mafiaLoginServer struct {
	grpc.ServerStream
}

func (x *mafiaLoginServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Mafia_FinishDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).FinishDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia.Mafia/FinishDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).FinishDay(ctx, req.(*FinishDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_ExecutePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).ExecutePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia.Mafia/ExecutePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).ExecutePlayer(ctx, req.(*ExecutePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_KillPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).KillPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia.Mafia/KillPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).KillPlayer(ctx, req.(*KillPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_CheckPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).CheckPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia.Mafia/CheckPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).CheckPlayer(ctx, req.(*CheckPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_PublishCheckResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishCheckResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).PublishCheckResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia.Mafia/PublishCheckResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).PublishCheckResult(ctx, req.(*PublishCheckResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinishDay",
			Handler:    _Mafia_FinishDay_Handler,
		},
		{
			MethodName: "ExecutePlayer",
			Handler:    _Mafia_ExecutePlayer_Handler,
		},
		{
			MethodName: "KillPlayer",
			Handler:    _Mafia_KillPlayer_Handler,
		},
		{
			MethodName: "CheckPlayer",
			Handler:    _Mafia_CheckPlayer_Handler,
		},
		{
			MethodName: "PublishCheckResult",
			Handler:    _Mafia_PublishCheckResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Login",
			Handler:       _Mafia_Login_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mafia.proto",
}
